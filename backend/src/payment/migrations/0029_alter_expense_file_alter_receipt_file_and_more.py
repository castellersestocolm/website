# Generated by Django 5.1.7 on 2025-04-19 11:25

import comunicat.storage
import django.core.validators
import django.db.models.deletion
import djmoney.models.fields
import payment.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("payment", "0028_alter_expense_file_alter_receipt_file_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="expense",
            name="file",
            field=models.FileField(
                blank=True,
                null=True,
                storage=comunicat.storage.SignedStorage(allow_overwrite=True),
                upload_to=payment.models.get_expense_file_name,
                validators=[
                    django.core.validators.FileExtensionValidator(
                        ["pdf", "png", "jpg", "jpeg"]
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="receipt",
            name="file",
            field=models.FileField(
                storage=comunicat.storage.SignedStorage(allow_overwrite=True),
                upload_to=payment.models.get_receipt_file_name,
                validators=[
                    django.core.validators.FileExtensionValidator(
                        ["pdf", "png", "jpg", "jpeg"]
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name="transactionimport",
            name="file",
            field=models.FileField(
                blank=True,
                null=True,
                storage=comunicat.storage.SignedStorage(allow_overwrite=True),
                upload_to=payment.models.get_transaction_import_file_name,
                validators=[django.core.validators.FileExtensionValidator(["csv"])],
            ),
        ),
        migrations.CreateModel(
            name="Statement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated"),
                ),
                ("date_from", models.DateField()),
                ("date_to", models.DateField()),
                (
                    "amount_start_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("SEK", "Swedish Krona")],
                        default="SEK",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "amount_start",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2, default_currency="SEK", max_digits=7
                    ),
                ),
                (
                    "amount_end_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("SEK", "Swedish Krona")],
                        default="SEK",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "amount_end",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2, default_currency="SEK", max_digits=7
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        storage=comunicat.storage.SignedStorage(allow_overwrite=True),
                        upload_to=payment.models.get_statement_file_name,
                        validators=[
                            django.core.validators.FileExtensionValidator(["pdf"])
                        ],
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statements",
                        to="payment.source",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
